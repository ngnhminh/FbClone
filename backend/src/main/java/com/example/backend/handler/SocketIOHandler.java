package com.example.backend.handler;

import com.corundumstudio.socketio.*;
import com.corundumstudio.socketio.listener.ConnectListener;
import com.corundumstudio.socketio.listener.DataListener;
import com.corundumstudio.socketio.listener.DisconnectListener;
import com.example.backend.dto.user.CallData;
import com.example.backend.dto.user.AnswerData;
import com.example.backend.dto.notification.NotificationDTO;
import com.example.backend.repository.NotificationRepository;
import com.example.backend.entity.Notification;
import com.example.backend.entity.NotificationType;
import com.example.backend.entity.Post;
import com.example.backend.entity.User;
import jakarta.annotation.PostConstruct;
import jakarta.annotation.PreDestroy;

import java.time.LocalDateTime;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;
import java.util.HashMap;
import org.springframework.stereotype.Component;
import com.example.backend.service.NotificationService;
import com.example.backend.repository.NotificationRepository;
import jakarta.annotation.PostConstruct;
import jakarta.annotation.PreDestroy;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;
import java.util.HashMap;

import org.apache.catalina.Server;
import org.springframework.stereotype.Component;

@Component
public class SocketIOHandler {

  private final SocketIOServer server;
  private final ConcurrentHashMap<String, SocketIOClient> userSocketMap = new ConcurrentHashMap<>();
  private final NotificationRepository notificationRepository;

  // Inject SocketIOServer t·ª´ Bean
  public SocketIOHandler(SocketIOServer server, NotificationRepository notificationRepository) {
    this.server = server;
    this.notificationRepository = notificationRepository;
  }

  public ConcurrentHashMap<String, SocketIOClient> getUserSocketMap() {
    return userSocketMap;
  }

  public void sendNotification(String userId, Object notificationDTO) {
    SocketIOClient client = userSocketMap.get(userId);
    if (client != null && client.isChannelOpen()) {
      client.sendEvent("notification", notificationDTO);
      System.out.println("‚úÖ Sent notification to user: " + userId);
    } else {
      System.out.println("‚ùå Cannot send notification: User " + userId + " not connected.");
    }
  }

  @PostConstruct
  public void startServer() {
    // Khi client k·∫øt n·ªëi
    server.addConnectListener(client -> {
      String userId = client.getHandshakeData().getSingleUrlParam("userId");
      System.out.println(
          "üîç Handshake data: " + client.getHandshakeData().getUrl());

      if (userId != null) {
        userSocketMap.put(userId, client);
        client.sendEvent("me", userId);
        System.out.println("‚úÖ User connected: " + userId);
        System.out.println(
            "üìä Current connected users: " + userSocketMap.keySet());
      } else {
        System.out.println("‚ö†Ô∏è User ID is null on connection!");
      }
    });

    // Khi client ng·∫Øt k·∫øt n·ªëi
    server.addDisconnectListener(client -> {
      // Find and remove the user by client reference
      String userIdToRemove = null;
      for (Map.Entry<String, SocketIOClient> entry : userSocketMap.entrySet()) {
        if (entry.getValue().equals(client)) {
          userIdToRemove = entry.getKey();
          break;
        }
      }

      if (userIdToRemove != null) {
        userSocketMap.remove(userIdToRemove);
        System.out.println("‚ùå User disconnected: " + userIdToRemove);
        System.out.println(
            "üìä Remaining connected users: " + userSocketMap.keySet());
      } else {
        System.out.println(
            "‚ùå Client disconnected: " +
                client.getSessionId() +
                " (not found in user map)");
      }
    });

    // Log khi g·ª≠i th√¥ng b√°o (t√πy ch·ªçn, ƒë·ªÉ debug)
    server.addEventListener("notification", NotificationDTO.class, (client, data, ackSender) -> {
      System.out
          .println("üì¢ Nh·∫≠n s·ª± ki·ªán notification cho user: " + data.getUserId() + ", n·ªôi dung: " + data.getMessage());
    });

    System.out.println("üöÄ Socket.IO Handler started!");

    // X·ª≠ l√Ω cu·ªôc g·ªçi
    server.addEventListener(
        "callUser",
        CallData.class,
        new DataListener<CallData>() {
          @Override
          public void onData(
              SocketIOClient client,
              CallData data,
              AckRequest ackSender) {
            System.out.println("üì• Nh·∫≠n y√™u c·∫ßu g·ªçi:");
            System.out.println(" - T·ª´ user: " + data.getFrom());
            System.out.println(" - G·ªçi ƒë·∫øn user: " + data.getUserToCall());
            System.out.println(" - D·ªØ li·ªáu signal: " + data.getSignalData());
            System.out.println(" - T√™n ng∆∞·ªùi g·ªçi: " + data.getName());

            // Validate signal data
            if (data.getSignalData() == null) {
              System.out.println("‚ùå Signal data is null!");
              return;
            }

            SocketIOClient receiver = userSocketMap.get(data.getUserToCall());
            if (receiver != null) {
              System.out.println(
                  "üìû ƒêang chuy·ªÉn ti·∫øp cu·ªôc g·ªçi ƒë·∫øn " + data.getUserToCall());

              // Create a Map with the necessary fields
              Map<String, Object> callData = new HashMap<>();
              callData.put("from", data.getFrom());
              callData.put("signal", data.getSignalData());
              callData.put("name", data.getName());

              // Send the data as a Map
              receiver.sendEvent("callUser", callData);

              System.out.println("‚úÖ ƒê√£ chuy·ªÉn ti·∫øp cu·ªôc g·ªçi th√†nh c√¥ng");
            } else {
              System.out.println(
                  "‚ùå Kh√¥ng t√¨m th·∫•y user " +
                      data.getUserToCall() +
                      " trong danh s√°ch k·∫øt n·ªëi!");
              System.out.println(
                  "üìä Danh s√°ch user ƒëang k·∫øt n·ªëi: " + userSocketMap.keySet());
            }
          }
        });

    // X·ª≠ l√Ω tr·∫£ l·ªùi cu·ªôc g·ªçi
    server.addEventListener(
        "answerCall",
        AnswerData.class,
        new DataListener<AnswerData>() {
          @Override
          public void onData(
              SocketIOClient client,
              AnswerData data,
              AckRequest ackSender) {
            // Convert Long to String for consistent key lookup
            String toUserId = String.valueOf(data.getTo());
            System.out.println("üì• Nh·∫≠n tr·∫£ l·ªùi cu·ªôc g·ªçi:");
            System.out.println(" - T·ª´ user: " + client.getSessionId());
            System.out.println(" - G·ª≠i ƒë·∫øn user: " + toUserId);
            System.out.println(" - D·ªØ li·ªáu signal: " + data.getSignal());

            SocketIOClient caller = userSocketMap.get(toUserId);
            if (caller != null) {
              System.out.println(
                  "‚úÖ Answer received from " +
                      client.getSessionId() +
                      " forwarding to " +
                      toUserId);
              // Send the signal data directly
              caller.sendEvent("callAccepted", data.getSignal());
              System.out.println("‚úÖ ƒê√£ chuy·ªÉn ti·∫øp tr·∫£ l·ªùi th√†nh c√¥ng");
            } else {
              System.out.println("‚ùå Caller " + toUserId + " is not connected!");
              System.out.println(
                  "üìä Danh s√°ch user ƒëang k·∫øt n·ªëi: " + userSocketMap.keySet());
            }
          }
        });
    server.addEventListener("endCall", CallData.class, new DataListener<CallData>() {
      @Override
      public void onData(SocketIOClient client, CallData data, AckRequest ackSender) {
        System.out.println("üìû Nh·∫≠n y√™u c·∫ßu k·∫øt th√∫c cu·ªôc g·ªçi t·ª´ user: " + data.getUserId());
        System.out.println("üìû Call ID: " + data.getCallId());

        // C·∫≠p nh·∫≠t tr·∫°ng th√°i cu·ªôc g·ªçi ho·∫∑c x√≥a d·ªØ li·ªáu cu·ªôc g·ªçi t·ª´ h·ªá th·ªëng n·∫øu c·∫ßn
        // thi·∫øt
        // (V√≠ d·ª•, x√≥a th√¥ng tin cu·ªôc g·ªçi kh·ªèi database ho·∫∑c session)

        // Th√¥ng b√°o cho c√°c user kh√°c v·ªÅ vi·ªác k·∫øt th√∫c cu·ªôc g·ªçi
        SocketIOClient receiver = userSocketMap.get(data.getUserId());
        if (receiver != null) {
          System.out.println("üìû ƒêang th√¥ng b√°o k·∫øt th√∫c cu·ªôc g·ªçi ƒë·∫øn user: " + data.getUserId());
          receiver.sendEvent("callEnded", data.getCallId());
        } else {
          System.out.println("‚ùå Kh√¥ng t√¨m th·∫•y user " + data.getUserId() + " trong danh s√°ch k·∫øt n·ªëi!");
        }
      }
    });

    // Handle ICE candidates
    server.addEventListener(
        "iceCandidate",
        Map.class,
        new DataListener<Map>() {
          @Override
          public void onData(
              SocketIOClient client,
              Map data,
              AckRequest ackSender) {
            String to = (String) data.get("to");
            SocketIOClient receiver = userSocketMap.get(to);
            if (receiver != null) {
              System.out.println("üßä Forwarding ICE candidate to: " + to);
              // Send the candidate data directly
              receiver.sendEvent("iceCandidate", data.get("candidate"));
            } else {
              System.out.println(
                  "‚ùå Receiver " + to + " not found for ICE candidate!");
            }
          }
        });

    // X·ª≠ l√Ω th√¥ng b√°o theo d√µi ng∆∞·ªùi d√πng
    server.addEventListener("followNotification", Map.class, new DataListener<Map>() {
      @Override
      public void onData(SocketIOClient client, Map data, AckRequest ackSender) {
        try {
          String fromUserId = (String) data.get("fromUserId");
          String fromUserName = (String) data.get("fromUserName");
          String toUserId = (String) data.get("toUserId");
          String message = (String) data.get("message");
          String timestamp = (String) data.get("timestamp");

          System.out.println("üì• Follow event received:");
          System.out.println(" - From: " + fromUserName + " (ID: " + fromUserId + ")");
          System.out.println(" - To: " + toUserId);
          System.out.println(" - Message: " + message);
          System.out.println(" - Time: " + timestamp);

          // Parse sentAt t·ª´ timestamp n·∫øu c√≥, n·∫øu kh√¥ng th√¨ l·∫•y LocalDateTime.now()
          LocalDateTime sentAt;
          try {
            sentAt = (timestamp != null && !timestamp.isEmpty())
                ? LocalDateTime.parse(timestamp)
                : LocalDateTime.now();
          } catch (Exception e) {
            sentAt = LocalDateTime.now();
          }

          SocketIOClient receiver = userSocketMap.get(toUserId);
          if (receiver != null) {
            // Chu·∫©n b·ªã d·ªØ li·ªáu g·ª≠i v·ªÅ client
            Map<String, Object> notifyData = new HashMap<>();
            notifyData.put("fromUserId", fromUserId);
            notifyData.put("fromUserName", fromUserName);
            notifyData.put("message", message);
            notifyData.put("sentAt", sentAt.toString());

            // T·∫°o c√°c ƒë·ªëi t∆∞·ª£ng li√™n quan
            User fromUser = new User();
            fromUser.setId(Long.parseLong(fromUserId));

            User toUser = new User();
            toUser.setId(Long.parseLong(toUserId));

            Post post = new Post();
            post.setId(6L); // ID b√†i post m·∫∑c ƒë·ªãnh ho·∫∑c l·∫•y t·ª´ data n·∫øu mu·ªën

            // T·∫°o Notification
            Notification notification = new Notification();
            notification.setUser(toUser);
            notification.setActor(fromUser);
            notification.setPost(post);
            notification.setType(NotificationType.FOLLOW);
            notification.setMessage(message);
            notification.setSentAt(sentAt);
            notification.setRead(false);

            // L∆∞u v√†o database
            notificationRepository.save(notification);

            // G·ª≠i event t·ªõi ng∆∞·ªùi nh·∫≠n
            receiver.sendEvent("receiveFollowNotification", notifyData);

            System.out.println("‚úÖ Follow notification sent to " + toUserId);
          } else {
            System.out.println("‚ùå User " + toUserId + " is not connected.");
          }
        } catch (Exception ex) {
          ex.printStackTrace();
          System.out.println("‚ùå Error processing follow notification: " + ex.getMessage());
        }
      }
    });
    System.out.println("üöÄ Socket.IO Handler started!");
  }

  @PreDestroy
  public void stopServer() {
    server.stop();
    System.out.println("‚ùå Socket.IO Server stopped.");
  }
}
